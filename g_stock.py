# -*- coding: utf-8 -*-
"""g_stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bw-yMXGJdf3e-w_DETR_TcDfxCyqliCJ
"""

from tensorflow.keras.layers import Dense,RNN,LSTM
from tensorflow.keras.models import Sequential
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import time
import datetime
import tensorflow.keras
from tensorflow.keras.layers import Dropout,BatchNormalization

#studying raw data
raw_train=pd.read_csv('Google_Stock_Price_Train.csv')
raw_test=pd.read_csv('Google_Stock_Price_Test.csv')
value=(raw_train['High'][60]+raw_train['Low'][60])/(2*(10**1))
raw_train=raw_train.iloc[0:60]
print(raw_train.shape)

#cleaning and preparing the data for training
train=np.zeros((raw_train.shape[0],2))
for i in range(raw_train.shape[0]):
    train[i,0]=time.mktime(datetime.datetime.strptime((raw_train['Date'][i]),"%m/%d/%Y").timetuple())
train[:,0]=(train[:,0]-train[0,0])/10**5
train[:,1]=(raw_train['High']+raw_train['Low'])/(2*(10**1))
test=np.zeros((raw_test.shape[0],2))
for i in range(raw_test.shape[0]):
    test[i,0]=time.mktime(datetime.datetime.strptime((raw_test['Date'][i]),"%m/%d/%Y").timetuple())
test[:,0]=(test[:,0]-train[0,0])/10**6
test[:,1]=(raw_test['High']+raw_test['Low'])/(2*10**2)

#data visualisation
plt.plot(train[:,0],train[:,1],'g-')
plt.show()

#training paramenters
train_val_split=0
iters=100
batch_size=2
my_learning_rate=0.0088
time_step=1

#preparing and preprocessing
def process(arr):
  x=[]
  y=[]
  for i in range(arr.shape[0]-time_step):
     x.append(arr[i:i+time_step,0])
     y.append(arr[i+time_step,1])
  x=np.array(x,dtype='float32')
  y=np.array(y,dtype='float32')
  x=np.reshape(x,(x.shape[0],x.shape[1],1))
  return (x,y)

train_x,train_y=process(train)
test_x,test_y=process(test)

#model preperation
model=Sequential()
model.add(LSTM(64,input_shape=(time_step,1),return_sequences=False))
model.add(Dense(8,activation="relu"))
model.add(Dense(1,activation="relu"))
opt=tensorflow.keras.optimizers.Adam(learning_rate=my_learning_rate)
model.compile(optimizer=opt,loss="mean_squared_error")

def make_prediction(x):
  f=[]
  f.append(x)
  pred=model.predict(np.array([x]))
  pred=np.array(pred)
  pred=np.reshape(pred,(pred.shape[0]))
  return pred
"""
vals=[]
index=[]
for i in range(train_y.size):
   vals.append(make_prediction(train_x[i]))
   index.append(i)
plt.plot(index,vals,'r-')
plt.plot(index,train_y,'g-')
plt.show()
print(train_x[-1].shape)
"""

def make_preds(n):
  c=[]
  curr=train_x[-1].copy()
  while(n>0):
    pred=model.predict(np.array([curr]))
    pred=np.array(pred)
    pred=np.reshape(pred,(pred.shape[0]))
    curr[0,0]=pred
    c.append(pred)
    n=n-1
  return c
"""
arr=make_preds(2)
print(arr)
print(value)
index=[i for i in range(2)]
plt.plot(index,arr,'r-')
"""

c=[]
d=[]
for i in range(1200-50):
  raw_train=pd.read_csv('Google_Stock_Price_Train.csv')
  value=(raw_train['High'][i+60]+raw_train['Low'][i+60])/(2*(10**1))
  raw_train=raw_train.iloc[i:i+60]
  train=np.zeros((raw_train.shape[0],2))
  for j in range(raw_train.shape[0]):
    train[j,0]=time.mktime(datetime.datetime.strptime((raw_train['Date'][j+i]),"%m/%d/%Y").timetuple())
    train[:,0]=(train[:,0]-train[0,0])/10**5
    train[:,1]=(raw_train['High']+raw_train['Low'])/(2*(10**1))
  train_x,train_y=process(train)
  history=model.fit(train_x,train_y,epochs=iters,batch_size=batch_size,verbose=1)
  val=make_preds(1)[0][0]
  c.append((val-value)**2)
  d.append(val-value)

c=np.array(c)
d=np.array(d)
print(c.shape)
print(np.mean(c))
print(np.mean(d))

raw_train=pd.read_csv('Google_Stock_Price_Train.csv')
  #value=(raw_train['High'][i+60]+raw_train['Low'][i+60])/(2*(10**1))
  #raw_train=raw_train.iloc[i:i+60]
train=np.zeros((raw_train.shape[0],2))
for j in range(raw_train.shape[0]):
  train[j,0]=time.mktime(datetime.datetime.strptime((raw_train['Date'][j]),"%m/%d/%Y").timetuple())
  train[:,0]=(train[:,0]-train[0,0])/10**5
  train[:,1]=(raw_train['High']+raw_train['Low'])/(2*(10**1))
print(np.mean(train[:,1]))